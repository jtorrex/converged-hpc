Vagrant.configure("2") do |config|

  config.vm.provider :libvirt do |libvirt|
    libvirt.disk_bus = 'virtio'
    libvirt.disk_driver :cache => 'writeback'
    libvirt.driver = 'kvm'
    libvirt.memorybacking :access, :mode => 'shared'
    libvirt.nested = true
    libvirt.nic_model_type = 'virtio'
    libvirt.storage :file, bus: 'virtio', cache: 'writeback'
    libvirt.video_type = 'virtio'
  end

  config.vm.define "head" do |head|
    head.vm.hostname = "head"
    head.vm.box = "roboxes-x64/ubuntu2204"
    
    head.vm.network "private_network",
      ip: "10.10.10.100",
      netmask: "255.255.255.0",
      libvirt__network_name: "cluster",
      libvirt__dhcp_enabled: false
    
    head.vm.provider :libvirt do |libvirt|
      libvirt.cpus = '3'
      libvirt.memory = '2048'
    end

    head.vm.box_check_update = false
    
    head.vm.synced_folder "./data", "/data", type: "nfs", nfs_version: 4, nfs_udp: false

    head.vm.provision "shell", path: "data/scripts/common.sh"
    head.vm.provision "shell", path: "data/scripts/head.sh"
    head.vm.provision "shell", path: "data/scripts/configure-maas.sh"

  end

  #config.vm.define "storage" do |storage|
  #  storage.vm.hostname = "storage"
  #  storage.vm.box = "roboxes-x64/ubuntu2204"
  #  storage.vm.network :private_network, ip: "192.168.56.210"
  #  storage.vm.provision "shell", path: "scripts/common.sh"
  #  storage.vm.provision "shell", path: "scripts/storage.sh"
  #  config.vm.synced_folder "./data", "/data"
  #end

  config.vm.define "node01" do |node01|
    node01.vm.hostname = "node01"

    node01.vm.network "private_network",
      ip: "10.10.10.101",
      netmask: "255.255.255.0",
      mac: "3a:15:0b:5f:61:87",
      libvirt__network_name: "cluster",
      libvirt__dhcp_enabled: false,
      libvirt__host_ip: '10.10.10.100'
    
    node01.vm.provider :libvirt do |libvirt|
      libvirt.cpus = '2'
      libvirt.memory = '2048'
      libvirt.machine_virtual_size = '10'
      boot_network = {'network' => 'cluster'}
      libvirt.boot boot_network 
      libvirt.boot 'hd'
    end

    node01.vm.provision "shell", path: "data/scripts/common.sh"

  end

  config.vm.define "node02" do |node02|
    node02.vm.hostname = "node02"

    node02.vm.network "private_network",
      type: "dhcp",
      mac: "0a:b5:2c:25:d9:a8",
      libvirt__network_name: "cluster",
      libvirt__dhcp_enabled: false,
      libvirt__host_ip: '10.10.10.100'

    node02.vm.provider :libvirt do |libvirt|
      libvirt.cpus = '2'
      libvirt.memory = '2048'
      libvirt.machine_virtual_size = '10'
      boot_network = {'network' => 'cluster'}
      libvirt.boot boot_network 
      libvirt.boot 'hd'
    end

    node02.vm.provision "shell", path: "data/scripts/common.sh"

  end
  
  config.vm.define "node03" do |node03|
    node03.vm.hostname = "node03"

    node03.vm.network "private_network",
      type: "dhcp",
      mac: "92:d7:d0:a1:5d:c9",
      libvirt__network_name: "cluster",
      libvirt__dhcp_enabled: false,
      libvirt__host_ip: '10.10.10.100'
    
    node03.vm.provider :libvirt do |libvirt|
      libvirt.cpu_mode = 'host-passthrough'
      libvirt.cpus = '2'
      libvirt.memory = '2048'
      libvirt.machine_virtual_size = '10'
      boot_network = {'network' => 'cluster'}
      libvirt.boot boot_network 
      libvirt.boot 'hd'
    end

    node03.vm.provision "shell", path: "data/scripts/common.sh"

  end

end
